<!DOCTYPE html>
<!-- saved from url=(0068)http://courses.washington.edu/info343/morris/assignments/files.shtml -->
<html lang="en"><object cotype="cs" id="cosymantecbfw" style="width: 100%; height: 0px; display: block; position: absolute; z-index: 99999; top: 3491px; left: 0px;" fid="928839018"></object><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
    <title>INFO 343: Web Technologies Â· Fall 2014 - Section D</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="INFO 343 course website and materials">
    <meta name="author" content="Jacob A. Morris">
    <link rel="shortcut icon" href="http://courses.washington.edu/info343/morris/img/favicon.ico">

    <!-- Le styles -->
	<link href="./main_files/bootstrap.min.css" rel="stylesheet" type="text/css" media="all">
    <link href="./main_files/bootstrap-responsive.min.css" rel="stylesheet" type="text/css" media="all">
    <link href="./main_files/docs.css" rel="stylesheet" type="text/css" media="all">
    <!-- link href="http://courses.washington.edu/info343/css/reset.css" rel="stylesheet" type="text/css" media="all" /-->
    <!-- link href="http://courses.washington.edu/info343/css/screen.css" rel="stylesheet" type="text/css" media="screen" /-->

    <!-- Le HTML5 shim, for IE6-8 support of HTML5 elements -->
    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->
    
    <style type="text/css">
		.hiddenText { display: none; }
		.clickable { cursor: pointer; }
	</style>
      <link rel="stylesheet" href="chrome-extension://mkfokfffehpeedafpekjeddnmnjhmcmk/toolbar/styles/placeholder.css" type="text/css"></head>
  <body data-spy="scroll" data-target=".subnav" data-offset="50"><div id="coFrameDiv" style="height:0px;"><iframe id="coToolbarFrame" src="./main_files/placeholder.htm" style="height:0px;width:100%;"></iframe></div>


  <!-- Navbar
    ================================================== -->
    <div class="navbar navbar-fixed-top">
      <div class="navbar-inner" id="top">
        <div class="container">
          <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="brand" href="http://courses.washington.edu/info343/morris/assignments/" style="color: white;">INFO 343</a>
          <div class="nav-collapse collapse">
            <ul class="nav">
              <li class=""><a href="http://courses.washington.edu/info343/morris/daily.shtml">Daily</a></li>
              <li class=""><a href="http://courses.washington.edu/info343/morris/assignments.shtml">Assignments / Challenges</a></li>
              <li class=""><a href="http://courses.washington.edu/info343/morris/readings.shtml">Readings &amp; Resources</a></li>
              <!--<li class=""><a href="./portfolio.shtml">Portfolio Pieces</a></li>-->
              <!--<li class=""><a href="./error_example.html">404 error example!</a></li>-->
            </ul>
          </div>
        </div>
      </div>
    </div>

        <div class="container">
    
        <h1 class="ng-binding"><img alt="challenge icon" src="./main_files/files.png" style="float: left; margin-right: .5em;">Managing Your Files: Version Control Systems</h1>
        <p class="lead ng-binding">Learn how to manage your files and deploy them to a web server using git and GitHub</p>   
        <h4 style="text-align: right;">Assignment created by <a href="https://ischool.uw.edu/people/faculty/dlsinfo">David Stearns</a></h4>
        <hr>
        <h2>Summary</h2>

        <p>One thing you will quickly discover is that a typical web site involves <em>a ton</em> of files. Every HTML page, every CSS stylesheet, every module of JavaScript, and every multimedia asset is a separate file, organized into a folder hierarchy. Even simple sites will typically have a dozen or more files, and large complex sites typically involve hundreds.</p>

        <p>Managing changes to these files by hand can become complex and error prone, especially when a whole team is working on these files at the same time. Moving these files from your local development machine to your web server can also be difficult to manage, especially when you're unsure which files you've modified since you last published the site.</p>

        <p>Thankfully, there are a class of tools that are designed especially to make managing all these files much easier. They are called <span class="term">version control systems</span>, and the most popular of these in the open-source community is known as <a href="http://git-scm.com/">git</a>. Although git can be used to manage files on your local machine, it is commonly used with the collaborative, cloud-based repository service <a href="https://github.com/">GitHub</a>, which maintains a copy of your files in a central, secure, and backed-up location.</p>

        <p>During this challenge, you will create a repository on GitHub, clone it to your local machine, add files, commit those changes, push them back to GitHub, and then deploy your web site to your student web server. If you complete all the steps, you will have learned the techniques necessary for managing and deploying a web site!</p>

        <p class="alert alert-block">If you haven't already done so, you need to create a free <a href="https://github.com/">GitHub</a> account. Do that before proceeding.</p>

        <p class="alert alert-block">If you haven't already done so, you also need to <a href="http://www.washington.edu/itconnect/connect/web-publishing/shared-hosting/activating-shared-web-hosting/">activate the Web Publishing service for your UW account</a>. Do that as well before proceeding.</p>

        <p class="alert alert-block">The git command line tools are already installed on the iSchool lab machines, but you can also <a href="http://git-scm.com/downloads">install it on your own computer</a> for free (Mac, Windows, or Linux). If you plan to do the other challenges on your own computer, you should definitely do this, as you will use git for every challenge. If you are afraid of the command line, you can also install the GitHub graphical tool (<a href="https://mac.github.com/">Mac</a> or <a href="https://windows.github.com/">Windows</a>), though you will still need to use the command line tools when deploying to your web server.</p>

        <h2>Objectives</h2>
        <p>By completing this challenge, you will practice and demonstrate mastery of the following skills:</p>

        <ul>
            <li>Creating repositories on GitHub</li>
            <li>Cloning those repositories to a development machine</li>
            <li>Writing a basic HTML page that links to resources in other files</li>
            <li>Using git to add new files, commit changes, revert changes, and push those changes back to GitHub</li>
            <li>Deploy a web site to a web server using git</li>
        </ul>

        <h2>Resources</h2>

        <p>We will learn how to use git and GitHub in class, but the following freely-available resources will also help you complete this challenge. If you don't already know how to complete all the steps below, take a few minutes to read/watch these before you begin. If you get stuck, come back and consult these.</p>

        <h3>Relevant Slides from Class</h3>

        <ul class="resources">
            <li class="resource slides"><a href="https://drive.google.com/file/d/0ByyvtLtE8qEBal9GdkpxUmpOeW8/edit?usp=sharing">INFO 343 Course Intro Slides</a></li>
        </ul>

        <h3>Resources on the Web</h3>

        <ul class="resources">
            <li class="resource video"><a href="http://git-scm.com/video/what-is-version-control">"Git Basics: What is Version Control?"</a></li>
            <li class="resource video"><a href="http://git-scm.com/video/what-is-git">Git Basics: What is Git?</a></li>
            <li class="resource video"><a href="http://git-scm.com/video/get-going">Git Basics: Get Going with Git</a></li>
            <li class="resource reading"><a href="https://help.github.com/articles/set-up-git">Setting up Git</a></li>
            <li class="resource reading"><a href="https://help.github.com/articles/create-a-repo">Create a Repo</a> on GitHub</li>    
            <li class="resource reading">Chapters 1 and 2 of <a href="http://git-scm.com/book"><em>Pro Git</em></a></li>
        </ul>

        <h2>Required Steps</h2>

        <p>To complete this challenge, follow these steps. If you get stuck, consult the resources above, <a href="mailto:zbalter@uw.edu?subject=INFO343%20Help%20on%20Git%20Files%20Assignment"> ask your TA,</a> or <a href="mailto:trauma@uw.edu?subject=INFO343%20Help%20on%20Git%20Files%20Assignment">ask Jacob</a>.</p>

        <p class="alert alert-block">Note that I won't typically tell you exactly how to do every step. Instead, I will provide links to resources that will help you figure out how to do that step. This will not only help you learn the skills, but also train you how to learn new skills in the future. Since web programming is always changing, you need to develop the ability to find out how to do new things by reading or watching resources on the Web.</p>

        <h3>Create a New Repository on GitHub</h3>

        <p>First, go to <a href="https://github.com/">GitHub</a> and sign in to your account.</p>

        <p>Next <a href="https://help.github.com/articles/create-a-repo">create a repository</a> on GitHub named <code>files-challenge</code>. You can set the description to whatever you want. Keep the repository public, and initialize it with a README file.</p>

        <p>This GitHub "repo" (short for "repository") will be the master version of your project. You will make changes to this, and then deploy it to your web server.</p>

        <h3>Clone that Repository to your Local Machine</h3>

        <p>To add files to this repository, <a href="http://git-scm.com/book/en/Git-Basics-Getting-a-Git-Repository#Cloning-an-Existing-Repository">clone that repository</a> to a directory on your local machine. This should create a new directory on your local machine, and make a complete copy of the repository (which only contains the README.md file at present) into that directory. This new directory is known as your local repository directory. Changes you make to this local repository can later be pushed back to the copy on GitHub.</p>

        <p class="alert alert-block">It's a good idea to keep all your projects organized under a particular directory inside your home directory that is separate from your other kinds of documents (e.g., word processing documents, spreadsheets, presentation slides, etc.). I typically create a directory called <code>code</code> in my home directory, and clone all my repositories into sub-directories under that. You can organize your local files however you want to, however.</p>

        <h3>Add and Change Files</h3>

        <p>Now let's create some new files and add them to the repository.</p>

        <h4>The HTML Page</h4>

        <p>To make this a bit more interesting, I want you to create an HTML page that describes your favorite fictional character. This can be any character from a movie, television series, book, comic, or story. The page will include the character's name, a short description, a picture, and link to some web page that provides more information about the character or the story. Choose your character and then continue with the rest of the steps.</p>

        <p>Create a sub-directory in your repository directory named <code>img</code>. Then find a picture of your character and download that image to a file in that newly-created <code>img</code> directory. If you've never done that before, right-click on the image and choose "Save Image As...".</p>

        <p class="alert alert-block">Spaces in file names are generally a bad idea when building web sites. The web was designed by people who love Unix, and although you can use spaces in Unix file names, doing so makes them much harder to refer to. If the file you just downloaded contains spaces in the file name, you should replace those spaces with a dash (<code>-</code>) or just remove them. Also, pay attention to the file extension as well as the file name (e.g., <code>.jpg</code> or <code>.png</code>). When referring to image files in your web pages, you must specify the entire file name, including its extension.</p>

        <p class="alert alert-block">If the picture file is really big (larger than a megabyte), you might want to use a graphics tool to reduce it in size. If you are on a Mac, you can use the <a href="http://www.wikihow.com/Resize-Pictures-(for-Macs)">built-in Preview application</a> to do that. On Widows, you can use the <a href="http://windows.microsoft.com/en-us/windows7/resize-a-picture-using-paint">built-in Paint application</a>. We will use a CSS rule to constrain the width of your picture on the web page to a maximum of 600 pixels, so there's no need for the image to be any larger than that.</p>

        <p>Next, create a file in the root of your local repository directory named <code>index.html</code>. Open this in your HTML editor and create the tags for a <a href="http://courses.washington.edu/templates/basic-html-template.html" target="_blank">basic HTML page</a>. Put your character's name in the <code>&lt;title&gt;</code> element, and provide appropriate content for the author and description <code>&lt;meta&gt;</code> elements.</p>

        <p>Also in the <code>&lt;head&gt;</code> section, add this element:</p>

        <pre>        &lt;link rel="stylesheet" href="css/main.css"&gt;
        </pre>

        <p>In the <code>&lt;body&gt;</code> section, add the following:</p> 

        <ul>
            <li>a <a href="http://www.w3schools.com/tags/tag_hn.asp">top-level heading</a> with the character's name</li>
            <li>the <a href="http://www.w3schools.com/tags/tag_img.asp">image</a> of your character that you downloaded to the <code>img</code> directory (note that the path to your image file needs to include the <code>img/</code> sub-directory as well as the full name of the image file).</li>
            <li>a <a href="http://www.w3schools.com/tags/tag_p.asp">paragraph</a> with a short description of your character</li>
            <li>a paragraph with the name of the story in which this character appears, where the story name is a <a href="http://www.w3schools.com/tags/tag_a.asp">hyperlink</a> pointing to an existing web page that provides more detail about that story</li>
        </ul>

        <h4>The Stylesheet</h4>

        <p>Create another sub-directory in your local repository directory named <code>css</code>. Within that new sub-directory, create a new file named <code>main.css</code>. Open that file in your code editor, and add the following style rules:</p>

        <pre>        body {
            font-family: Helvetica, sans-serif;
            font-size: 18px;
        }
        img {
            max-width: 600px;
        }
        </pre>

        <p class="alert alert-block">Don't worry if you don't understand these CSS rules yet. I will explain them in class, and you will get a chance to practice and demonstrate your CSS skills over the next two challenges. The point of this challenge is to learn git, and practice your basic HTML skills.</p>

        <h4>The Readme.md File</h4>

        <p>Finally, update the <code>README.md</code> file. Open that file in your text editor. It should contain the basic description you provided when you created the repository on GitHub. Add a new line to that file with a warm, personal message to your TA. Something polite. No insults or swearing, please.</p>

        <h3>Add and Commit Changes</h3>

        <p>You've now added a few files and changed one existing file. To see all the files that have changed, open a terminal window, change to your project directory, and enter the following command:</p>

        <pre>git status</pre>

        <p>At this point, you should <a href="http://git-scm.com/book/en/Git-Basics-Recording-Changes-to-the-Repository">add the new files and commit all of your changes</a> to your local repository. Each commit records a version of the files that you can get back to if something goes wrong. It also allows you to see exactly what was changed during each commit, which can be helpful when tracking down how an error was introduced.</p>

        <h3>Push Changes to GitHub</h3>

        <p>The previous step recorded a set of changes to your local repository on your local machine, but in order for others to see those changes, and to ensure that they are backed up, you now need to <a href="http://git-scm.com/book/en/Git-Basics-Working-with-Remotes#Pushing-to-Your-Remotes">push them up to GitHub</a>.</p>

        <p>After pushing these changes, you should now be able to go to <a href="https://github.com/">your repository on GitHub</a> and see the new files, as well as the change you made to the <code>README.md</code> file.</p>

        <h3>Make a Mistake and Revert Changes</h3>

        <p>Eventually, you will end up making a bunch of changes to your files that you realize were a bad idea. You will have saved the files already so that you can see them in the web browser, so you will want a simple way revert all your changes, and get back to the way the files were after your last commit (or some previous commit). Version control systems like git make this very easy to do. With every commit, git saves a snapshot of your files so that you can always get back to the way they were at that time.</p>

        <p>To boost your confidence, let's make some horrible changes to your existing files, save them, and revert those changes using git.</p>

        <p>Open the <code>index.html</code> and <code>css/main.css</code> files in your text editor and make some bad changes to them: mess up some tags, insert some swear words, or just make changes that you will want to revert. Save the files and view the HTML file in your browser (if you messed up tags, it may not load at all).</p>

        <p>Now don't panic. Git makes it easy to undo all these changes to all your files. Open a terminal window, change to your project directory, and enter the following command (make sure you type the dot at the end):</p>

        <pre>git checkout .</pre>

        <p>Go back to your text editor and verify that the changes have been reverted. Most text editors will automatically reload a file changed by another process, but you might need to activate the editor window before it will do that. If your text editor doesn't auto-reload, close the file and reload it.</p>

        <h3>Deploy Site to Your Student Web Server</h3>

        <p>"Deploying" a site involves copying the most recent versions of all files to the web server. The easiest way to do that is to use git. Deploying is done by cloning (or later pulling changes from) your repository on GitHub.</p>

        <p>The UW Student Web Servers have git installed on them, but in order to run those commands, we need to connect to the server via the terminal. To do that, we will use the very common command-line utility <code>ssh</code>, which stands for "secure shell."</p>

        <p>In the terminal type the following command, replacing <span class="token">your-net-id</span> with your UW NetID, and hit <code>Enter</code>. It will prompt you for a password, which is your UW NetId password.</p>

        <pre>ssh <span class="token">your-net-id</span>@vergil.u.washington.edu</pre>

        <p>Next type the command <code>ls</code> and hit enter. This lists the directories and files in the current directory (if you are used to Windows, this is like the <code>dir</code> command). If you see a directory named <code>student_html</code> you want to use that one. If you don't have a <code>student_html</code> directory, you should use the <code>public_html</code> directory instead.</p>

        <p class="alert alert-block">If you have both a <code>public_html</code> and a <code>student_html</code> directory, use the <code>student_html</code> one. The UW creates these two directories if you have multiple affiliations with the university (e.g., you are both a student and an employee or staff worker). The <code>student_html</code> directory is where the web server will look when you use the <code>http://students.washington.edu/<span class="token">your-net-id</span></code> URL.</p>

        <p>Change to the appropriate directory using the command:</p>

        <pre>cd <span class="token">student_html or public_html</span></pre>

        <p>List the files again (remember the command?) and if you don't already have a directory named <code>info343</code>, create one now using the command:</p>

        <pre>mkdir info343</pre>

        <p>Change into the info343 directory using the same command as before. Now <a href="http://git-scm.com/book/en/Git-Basics-Getting-a-Git-Repository#Cloning-an-Existing-Repository">clone your GitHub repository</a> to the web server, just like you cloned it to your local machine.</p>

        <p>If you did everything correctly, you should now be able to open the following URL in your web browser. Remember to replace <span class="token">your-net-id</span> with your UW NetID:</p>

        <pre>http://students.washington.edu/<span class="token">your-net-id</span>/info343/files-challenge</pre>

        <p class="alert alert-block">If your browser can't find the web site, verify that you've put the files in the correct place, and verify that you didn't mistype your UW NetID. Also, if you have multiple affiliations, try using <code>staff.washington.edu</code> instead of <code>students.washington.edu</code>. Sometimes the web servers get configured incorrectly causing the <code>staff.washington.edu</code> domain to point to the <code>student_html</code> directory.</p>

        <p>Once you've verified that everything is working, you can submit both your deployed website URL and your GitHub repository URL via this <a href="https://canvas.uw.edu/courses/916784/assignments/2627096">Canvas Assignment</a>.</p>

        <h2>Keep Practicing</h2>

        <p>Now that you've gone through the process once, try making some more changes to the files in your local repository, commit them, pushing them to GitHub, and then pulling them to your web server. Because you've already cloned the repository to your web server, updating the server to the most recent versions of all the files can be done with one simple command, executed from within the repository directory on the server:</p>

        <pre>git pull</pre>

        <p>The <code>git clone</code> command created the repository directory on the server and recorded where it cloned from. So when you execute <code>git pull</code> it returns to the "origin" and gathers any changes that have been committed since the last time it pulled. Any changes made to the repository on GitHub will be copied down, merged into the files that are on the web server, and your web site will be up-to-date!</p>

            <!-- Footer
      ================================================== -->
      <footer class="footer">
        <p class="pull-right"><a href="http://courses.washington.edu/info343/morris/assignments/files.shtml#top">Back to top</a></p>
        <p>Â© 2014 Jacob A. Morris, Information School of the University of Washington - All rights reserved</p>
        <p>Code licensed under the <a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank">Apache License v2.0</a>. Documentation licensed under <a href="http://creativecommons.org/licenses/by/3.0/">CC BY 3.0</a>.
        <br><a href="http://www.w3.org/html/logo/"><img src="./main_files/html5-badge-h-css3-device-semantics.png" width="197" height="64" alt="HTML5 Powered with CSS3 / Styling, Device Access, and Semantics" title="HTML5 Powered with CSS3 / Styling, Device Access, and Semantics" style="vertical-align:middle;"></a>Designed for the future of the web using valid <a href="http://validator.w3.org/check/referer">HTML5</a> and <a href="http://jigsaw.w3.org/css-validator/check/referer?&profile=css3">CSS3</a></p>

        <!--<p>Icons from <a href="http://glyphicons.com">Glyphicons Free</a>, licensed under <a href="http://creativecommons.org/licenses/by/3.0/">CC BY 3.0</a>.</p>-->
      </footer>

    </div><!-- /container -->



    <!-- Le javascript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script async="" src="./main_files/analytics.js"></script><script src="./main_files/jquery.js"></script>
    <script src="./main_files/bootstrap.min.js"></script>
    <script src="./main_files/application.js"></script>
    
    
    <script src="./main_files/jquery.jcountdown.min.js"></script>

    <!-- Le Google Analytics javascript -->

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
        })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

        ga('create', 'UA-42656162-1', 'washington.edu');
        ga('send', 'pageview');

    </script>

  


</body></html>